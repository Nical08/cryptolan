<%
const currentPage = 'group';
const title = 'Chat di Gruppo';
%>

<!DOCTYPE html>
<html lang="it">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %> - P2P Chat</title>
    <link rel="stylesheet" href="/css/style.css">
    <link href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0/css/all.min.css" rel="stylesheet">
</head>
<body>
    <div class="app-container">
        <header class="header">
            <div class="header-content">
                <div class="logo">
                    <i class="fab fa-telegram"></i>
                    <span>P2P Secure Chat</span>
                </div>
                <nav class="nav">
                    <a href="/" class="nav-link active">
                        <i class="fas fa-users"></i> Gruppo
                    </a>
                    <a href="/peers" class="nav-link">
                        <i class="fas fa-user-friends"></i> Chat Private
                    </a>
                    <a href="/settings" class="nav-link">
                        <i class="fas fa-cog"></i> Impostazioni
                    </a>
                    <span class="user-info">
                        <i class="fas fa-user"></i> <%= user.username %>
                        <span id="connectionStatus" class="status-indicator online"></span>
                    </span>
                </nav>
            </div>
        </header>

        <main class="main-content">
            <div class="chat-container">
                <div class="chat-sidebar">
                    <div class="sidebar-header">
                        <h3><i class="fas fa-network-wired"></i> Rete</h3>
                        <button class="btn btn-sm btn-outline" onclick="scanNetwork()">
                            <i class="fas fa-sync-alt"></i> Scansione
                        </button>
                    </div>
                    <div class="network-info">
                        <div class="info-item">
                            <span>Peer connessi:</span>
                            <span class="value" id="connectedPeersCount">0</span>
                        </div>
                        <div class="info-item">
                            <span>Stato:</span>
                            <span class="value" id="networkStatus">ðŸŸ¢ Online</span>
                        </div>
                    </div>
                    <div class="peers-list" id="peersList">
                        <!-- La lista peer verrÃ  aggiornata in tempo reale -->
                    </div>
                </div>
                
                <div class="chat-main">
                    <div class="chat-header">
                        <h3><i class="fas fa-users"></i> Chat di Gruppo</h3>
                        <div class="chat-info">
                            <span class="status-indicator online"></span>
                            <span>Broadcast a tutti i peer connessi</span>
                            <button class="btn btn-sm btn-outline" onclick="loadGroupMessages()">
                                <i class="fas fa-sync-alt"></i> Aggiorna
                            </button>
                        </div>
                    </div>
                    
                    <div class="messages-container" id="messagesContainer">
                        <% messages.forEach(message => { %>
                            <div class="message <%= message.direction === 'outgoing' ? 'outgoing' : 'incoming' %> group-message">
                                <div class="message-header">
                                    <span class="sender">
                                        <% if (message.direction === 'outgoing') { %>
                                            ðŸ‘¤ Tu
                                        <% } else { %>
                                            ðŸ‘¥ <%= message.sender_username || 'Unknown' %>
                                        <% } %>
                                    </span>
                                    <span class="time"><%= new Date(message.timestamp).toLocaleTimeString() %></span>
                                </div>
                                <div class="message-content">
                                    <%= message.message %>
                                </div>
                                <div class="message-footer">
                                    <span class="message-type">ðŸ“¢ Gruppo</span>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                    
                    <div class="message-input-container">
                        <form id="messageForm" class="message-form">
                            <div class="input-group">
                                <input type="text" id="messageInput" 
                                       placeholder="Scrivi un messaggio a tutto il gruppo..." 
                                       maxlength="500"
                                       required>
                                <button type="submit" class="btn btn-primary">
                                    <i class="fas fa-bullhorn"></i> Invia a tutti
                                </button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </main>

        <!-- Notifica toast per nuovi messaggi -->
        <div id="toast" class="toast hidden">
            <div class="toast-content">
                <span id="toastMessage"></span>
            </div>
        </div>

        <footer class="footer">
            <div class="footer-content">
                <p>P2P Secure Chat - Comunicazione crittata end-to-end</p>
            </div>
        </footer>
    </div>
    
    <script src="/socket.io/socket.io.js"></script>
    <script>
        const socket = io();
        let currentMessages = new Set(); // Per evitare duplicati
        
        // Unisciti alla chat di gruppo
        socket.emit('join-group');
        
        // Richiedi aggiornamento lista peer
        socket.emit('request-peers-update');
        
        // Inizializza la lista peer
        async function loadPeers() {
            try {
                const response = await fetch('/api/peers');
                const data = await response.json();
                
                if (data.success) {
                    updatePeersList(data.peers);
                }
            } catch (error) {
                console.error('Errore caricamento peer:', error);
            }
        }
        
        function updatePeersList(peers) {
            const peersList = document.getElementById('peersList');
            const connectedCount = peers.filter(p => p.isConnected).length;
            
            document.getElementById('connectedPeersCount').textContent = `${connectedCount}/${peers.length}`;
            
            peersList.innerHTML = peers.map(peer => `
                <div class="peer-item" data-peer-id="${peer.ip}:${peer.port}">
                    <div class="peer-info">
                        <h4>${peer.username || 'Sconosciuto'}</h4>
                        <p class="peer-address">${peer.ip}:${peer.port}</p>
                        <div class="peer-connection-info">
                            <span class="connection-status ${peer.isConnected ? 'connected' : 'disconnected'}">
                                ${peer.isConnected ? 'ðŸŸ¢' : 'ðŸ”´'}
                            </span>
                            <span>${peer.isConnected ? 'Connesso' : 'Disconnesso'}</span>
                        </div>
                    </div>
                    <div class="peer-status ${peer.public_key ? 'encrypted' : 'plain'}">
                        ${peer.public_key ? 'ðŸ”’' : 'ðŸ”“'}
                    </div>
                </div>
            `).join('');
            
            // Aggiungi event listener per i click sui peer
            document.querySelectorAll('.peer-item').forEach(item => {
                item.addEventListener('click', function() {
                    const peerId = this.dataset.peerId;
                    window.location.href = `/chat/${encodeURIComponent(peerId)}`;
                });
            });
        }
        
        // Gestione invio messaggi di gruppo
        document.getElementById('messageForm').addEventListener('submit', async (e) => {
            e.preventDefault();
            
            const messageInput = document.getElementById('messageInput');
            const message = messageInput.value.trim();
            
            if (!message) return;
            
            try {
                const response = await fetch('/api/send-group-message', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ message })
                });
                
                const data = await response.json();
                
                if (data.success) {
                    messageInput.value = '';
                    // Il messaggio verrÃ  aggiunto via WebSocket
                } else {
                    console.error('Errore invio messaggio gruppo:', data.error);
                    showToast('Errore nell\'invio del messaggio: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Errore invio messaggio:', error);
                showToast('Errore di connessione', 'error');
            }
        });
        
        // ðŸ“¨ RICEZIONE MESSAGGI DI GRUPPO IN TEMPO REALE
        socket.on('new-group-message', (data) => {
            addMessageToChat(data);
            showNewMessageNotification(data);
        });
        
        function addMessageToChat(data) {
            // Evita duplicati
            if (currentMessages.has(data.id)) return;
            currentMessages.add(data.id);
            
            const messagesContainer = document.getElementById('messagesContainer');
            const messageElement = document.createElement('div');
            messageElement.className = `message ${data.direction === 'outgoing' ? 'outgoing' : 'incoming'} group-message`;
            messageElement.innerHTML = `
                <div class="message-header">
                    <span class="sender">
                        ${data.direction === 'outgoing' ? 'ðŸ‘¤ Tu' : `ðŸ‘¥ ${data.sender}`}
                    </span>
                    <span class="time">${new Date(data.timestamp).toLocaleTimeString()}</span>
                </div>
                <div class="message-content">
                    ${data.message}
                </div>
                <div class="message-footer">
                    <span class="message-type">ðŸ“¢ Gruppo</span>
                </div>
            `;
            
            messagesContainer.appendChild(messageElement);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Mantieni solo gli ultimi 100 ID per evitare memory leak
            if (currentMessages.size > 100) {
                const first = Array.from(currentMessages)[0];
                currentMessages.delete(first);
            }
        }
        
        // Aggiornamento lista peer in tempo reale
        socket.on('peers-updated', (data) => {
            updatePeersList(data.peers);
        });
        
        // Notifiche di sistema
        socket.on('system-notification', (data) => {
            console.log('Notifica di sistema:', data.message);
            if (data.type === 'new_message') {
                showToast(data.message, 'info');
            }
        });
        
        // Funzione per mostrare notifiche toast
        function showToast(message, type = 'info') {
            const toast = document.getElementById('toast');
            const toastMessage = document.getElementById('toastMessage');
            
            toastMessage.textContent = message;
            toast.className = `toast toast-${type} show`;
            
            setTimeout(() => {
                toast.className = 'toast hidden';
            }, 3000);
        }
        
        // Notifica per nuovi messaggi
        function showNewMessageNotification(data) {
            // Mostra notifica solo se la finestra non Ã¨ in focus
            if (!document.hasFocus()) {
                showToast(`Nuovo messaggio da ${data.sender}: ${data.message}`, 'message');
            }
        }
        
        // Carica messaggi di gruppo
        async function loadGroupMessages() {
            try {
                const response = await fetch('/api/group-messages');
                const data = await response.json();
                
                if (data.success) {
                    const messagesContainer = document.getElementById('messagesContainer');
                    messagesContainer.innerHTML = '';
                    currentMessages.clear();
                    
                    data.messages.forEach(message => {
                        const messageElement = document.createElement('div');
                        messageElement.className = `message ${message.direction === 'outgoing' ? 'outgoing' : 'incoming'} group-message`;
                        messageElement.innerHTML = `
                            <div class="message-header">
                                <span class="sender">
                                    ${message.direction === 'outgoing' ? 'ðŸ‘¤ Tu' : `ðŸ‘¥ ${message.sender_username || 'Unknown'}`}
                                </span>
                                <span class="time">${new Date(message.timestamp).toLocaleTimeString()}</span>
                            </div>
                            <div class="message-content">
                                ${message.message}
                            </div>
                            <div class="message-footer">
                                <span class="message-type">ðŸ“¢ Gruppo</span>
                            </div>
                        `;
                        messagesContainer.appendChild(messageElement);
                    });
                    
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    showToast('Messaggi aggiornati', 'success');
                }
            } catch (error) {
                console.error('Errore caricamento messaggi:', error);
                showToast('Errore nel caricamento dei messaggi', 'error');
            }
        }
        
        // Funzioni globali
        async function scanNetwork() {
            try {
                const response = await fetch('/api/scan-network', {
                    method: 'POST'
                });
                
                const data = await response.json();
                
                if (data.success) {
                    showToast('Scansione rete avviata!', 'success');
                    setTimeout(() => {
                        socket.emit('request-peers-update');
                    }, 3000);
                } else {
                    showToast('Errore: ' + data.error, 'error');
                }
            } catch (error) {
                console.error('Errore scansione:', error);
                showToast('Errore di connessione', 'error');
            }
        }
        
        // Auto-scroll iniziale
        window.addEventListener('load', () => {
            const messagesContainer = document.getElementById('messagesContainer');
            if (messagesContainer) {
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
            }
            loadPeers();
        });
        
        // Aggiorna periodicamente la lista peer
        setInterval(() => {
            socket.emit('request-peers-update');
        }, 30000); // Ogni 30 secondi
    </script>
</body>
</html>